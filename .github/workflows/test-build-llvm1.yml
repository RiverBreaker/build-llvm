name: Test build llvm for windows

on:
  workflow_dispatch:
    inputs:
      llvm-version:
        description: 'LLVM version'
        required: true
        default: '20.1.0'

jobs:
  build-llvm-windows:
    runs-on: windows-latest
    permissions:
      contents: write

    strategy:
      matrix:
        config: [Debug, Release, RelWithDebInfo]
    steps:
      - uses: actions/checkout@v3

      - name: Enable long paths
        shell: pwsh
        run: |
          git config --system core.longpaths true
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
            -Name "LongPathsEnabled" -Value 1

      - name: Get LLVM source code
        run: |
          git clone https://github.com/llvm/llvm-project.git
          cd llvm-project
          git checkout llvmorg-${{ inputs.llvm-version }} -b llvm-${{ inputs.llvm-version }}

      - name: Build llvm for windows
        shell: cmd
        env:
          LLVM_CONFIG: ${{ matrix.config }}
        run: |
          rem ====== 用户可调路径 ======
          set "VS_ROOT_DIR=C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
          set "LLVM_CODE_BASE=%GITHUB_WORKSPACE%\llvm-project"
          set "LLVM_BUILD_DIR=%GITHUB_WORKSPACE%\build\%LLVM_CONFIG%"
          set "LLVM_INSTALL_ROOT=C:\llvm"
          set "LLVM_INSTALL_DIR=%LLVM_INSTALL_ROOT%\install\%LLVM_CONFIG%"
          set "PACKAGE_DIR=%LLVM_INSTALL_ROOT%\packages"

          rem ====== 创建目录 ======
          for %%D in ("%LLVM_CODE_BASE%" "%LLVM_BUILD_DIR%" "%LLVM_INSTALL_ROOT%" "%LLVM_INSTALL_DIR%" "%PACKAGE_DIR%") do (
             if not exist "%%D" mkdir "%%D"
          )

          rem ====== 1. 拷贝源码 ======
          cd /d "%LLVM_CODE_BASE%"
          if not exist llvm\CMakeLists.txt (
              echo [ERROR] 源码目录下找不到 llvm\CMakeLists.txt
              exit /b 1
          )

          rem ====== 2. 生成构建树 ======
          call "%VS_ROOT_DIR%\VC\Auxiliary\Build\vcvarsall.bat" amd64 || (echo vcvarsall failed && exit /b 1)
          cmake -S llvm ^
                -B "%LLVM_BUILD_DIR%" ^
                -G Ninja ^
                -DCMAKE_BUILD_TYPE=%LLVM_CONFIG% ^
                -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" ^
                -DLLVM_TARGETS_TO_BUILD="X86" ^
                -DLLVM_ENABLE_LLD=OFF ^
                -DLLVM_ENABLE_RTTI=ON ^
                -DPACKAGE_VENDOR="Build By @Riverbreaker (Github Actions CI Build)" ^
                -DCLANG_VENDOR="Build By @Riverbreaker (Github Actions CI Build)" ^
                -DCMAKE_INSTALL_PREFIX="%LLVM_INSTALL_DIR%"
          if errorlevel 1 (
              echo [ERROR] CMake 生成失败
              exit /b 1
          )

          rem ====== 3. 编译 ======
          ninja -C "%LLVM_BUILD_DIR%" -j8
          if errorlevel 1 (
              echo [ERROR] 编译失败
              exit /b 1
          )

          rem ====== 5. 安装 ======
          ninja -C "%LLVM_BUILD_DIR%" install
          echo [INFO] 安装完成，目录：%LLVM_INSTALL_DIR%

          rem ====== 6. 验证 ======
          echo [INFO] 验证安装结果
          "%LLVM_INSTALL_DIR%\bin\clang.exe" --version
          echo [INFO] 运行测试
          echo #include ^<stdio.h^> > test.c
          echo int main() { printf("Hello, World!\n"); return 0; } >> test.c
          "%LLVM_INSTALL_DIR%\bin\clang.exe" test.c -o test.exe && test.exe
          if errorlevel 1 exit /b 1
          echo [INFO] 开始清理构建目录
          powershell -command "Remove-Item -Recurse -Force '%LLVM_BUILD_DIR%'" || (echo [ERROR] 构建清理失败 && exit /b 1)
          echo [INFO] 清理完成

          rem ====== 7. 打包（生成单文件 .7z，若过大则分卷） ======
          cd /d "%LLVM_INSTALL_DIR%"
          set "ZIP_FILE=%PACKAGE_DIR%\llvm-${{ inputs.llvm-version }}-win-x86-%LLVM_CONFIG%.7z"
          if exist "%ZIP_FILE%" del /f /q "%ZIP_FILE%"
          echo [INFO] 开始打包到：%ZIP_FILE%

          rem 先生成单文件 7z
          echo [INFO] 开始生成单文件 7z 压缩包
          7z a -t7z "%ZIP_FILE%" . -mx=6 -mmt=on
          if errorlevel 1 (
            echo [ERROR] 生成单文件压缩包失败
            exit /b 1
          )
          echo [INFO] 单文件压缩包生成完成

      - name: Package build to output
        shell: pwsh
        env:
          CONFIG: ${{ matrix.config }}
          ZIP_FILE: C:\llvm\packages\llvm-${{ inputs.llvm-version }}-win-x86-${{ matrix.config }}.7z
          LLVM_INSTALL_DIR: C:\llvm\install\${{ matrix.config }}
        run: |
          $FilePath = $env:ZIP_FILE
          $NewFilePath = Join-Path $env:RUNNER_TEMP 'packages'
          New-Item -Path $NewFilePath -ItemType Directory -Force | Out-Null
          $LimitSize = 1950MB

          try {
            $FileSize = (Get-Item $FilePath).Length
          } catch {
            Write-Host "[ERROR] 找不到压缩文件: $FilePath"
            exit 1
          }

          if ($FileSize -le $LimitSize) {
            Write-Host "[INFO] 压缩包大小正常 ($([math]::Round($FileSize/1MB,2)) MB)，复制到包目录"
            Copy-Item $FilePath (Join-Path $NewFilePath (Split-Path $FilePath -Leaf)) -Force
            Write-Host "[INFO] 复制完成"
          } else {
            Write-Host "[INFO] 压缩包过大 ($([math]::Round($FileSize/1MB,2)) MB)，开始分卷压缩到: $NewFilePath"
            $OutputBase = "llvm-${{ inputs.llvm-version }}-win-x86-$Env:CONFIG"
            $OutputPath = Join-Path $NewFilePath ($OutputBase + '.7z')
            $source = (Join-Path $env:LLVM_INSTALL_DIR '*')
            $args = @('a','-t7z',$OutputPath,$source,'-v1950m','-mx=6','-mmt=on')
            Write-Host '[INFO] 运行命令: 7z ' + ($args -join ' ')
            $proc = Start-Process -FilePath '7z' -ArgumentList $args -NoNewWindow -Wait -PassThru -WorkingDirectory $env:LLVM_INSTALL_DIR
            if ($proc.ExitCode -ne 0) {
              Write-Host '[ERROR] 分卷压缩失败，保留原始单文件压缩包:' $FilePath
              exit 1
            } else {
              Write-Host "[INFO] 分卷压缩成功, 输出前缀: $OutputPath"
              try { Remove-Item -Force $FilePath -ErrorAction Stop; Write-Host "[INFO] 已删除原始单文件压缩包: $FilePath" } catch { Write-Host "[WARN] 删除原始压缩包失败"; }
            }
          }

      - name: Create Tag if not exists
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
        shell: pwsh
        env:
          REPO:      ${{ github.repository }}
          TAG:       llvm-${{ inputs.llvm-version }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 1. 检查本地是否已存在 TAG
          $localExists = (git tag --list $env:TAG) -ne ""
          if ($localExists) {
            Write-Host "Local tag $TAG already exists, skip creation."
          } else {
            # 2. 检查远程是否已存在 TAG
            $remoteTags = git ls-remote --tags origin $env:TAG
            if ($remoteTags) {
              Write-Host "Remote tag $TAG already exists, skip creation."
            } else {
              # 3. 本地＆远程都不存在时，创建并推送
              git tag "$env:TAG"
              git push origin "$env:TAG"
              Write-Host "Tag $TAG created and pushed."
            }
          }

      - name: Ensure Release exists or create
        id: ensure_release
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="llvm-${{ inputs.llvm-version }}"
          # 查看是否已有该 tag 对应的 Release
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "found=existing" >> $GITHUB_OUTPUT
          else
            echo "found=new" >> $GITHUB_OUTPUT
            gh release create "$TAG" \
              --title "$TAG Auto Builds" \
              --notes "Automated build of $TAG" \
              --draft=false \
              --prerelease=false
          fi

      - name: Upload build artifacts
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
          CONFIG: ${{ matrix.config }}
        run: |
          $tag = "llvm-${{ inputs.llvm-version }}"
          $dst = "$Env:RUNNER_TEMP/packages"
          $base = "llvm-${{ inputs.llvm-version }}-win-x86-$Env:CONFIG"

          # 根据是否有分卷自动上传
          $parts = Get-ChildItem "$dst\$base.7z.*" -ErrorAction SilentlyContinue
          if ($parts) {
            $parts | Where Length -GT 0 | ForEach { gh release upload $tag $_.FullName --clobber }
          }
          elseif (Test-Path "$dst\$base.7z") {
            $f = Get-Item "$dst\$base.7z"
            if ($f.Length -gt 0) { gh release upload $tag $f.FullName --clobber }
          }