name: Test build llvm for windows

on:
  workflow_dispatch:
    inputs:
      llvm-version:
        description: 'LLVM version'
        required: true
        default: '20.1.0'

jobs:
  build-llvm-windows:
    runs-on: windows-latest
    permissions:
      contents: write

    strategy:
      matrix:
        config: [Debug, Release, RelWithDebInfo]
    steps:
      - uses: actions/checkout@v3

      - name: Enable long paths
        shell: pwsh
        run: |
          git config --system core.longpaths true
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
            -Name "LongPathsEnabled" -Value 1

      - name: Get LLVM source code
        run: |
          git clone https://github.com/llvm/llvm-project.git
          cd llvm-project
          git checkout llvmorg-${{ inputs.llvm-version }} -b llvm-${{ inputs.llvm-version }}

      - name: Build llvm for windows
        shell: cmd
        env:
          LLVM_CONFIG: ${{ matrix.config }}
        run: |
          rem ====== 用户可调路径 ======
          set "VS_ROOT_DIR=C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
          set "LLVM_CODE_BASE=%GITHUB_WORKSPACE%\llvm-project"
          set "LLVM_BUILD_DIR=%GITHUB_WORKSPACE%\build\%LLVM_CONFIG%"
          set "LLVM_INSTALL_ROOT=C:\llvm"
          set "LLVM_INSTALL_DIR=%LLVM_INSTALL_ROOT%\install\%LLVM_CONFIG%"
          set "PACKAGE_DIR=%LLVM_INSTALL_ROOT%\packages"

          rem ====== 创建目录 ======
          for %%D in ("%LLVM_CODE_BASE%" "%LLVM_BUILD_DIR%" "%LLVM_INSTALL_ROOT%" "%LLVM_INSTALL_DIR%" "%PACKAGE_DIR%") do (
             if not exist "%%D" mkdir "%%D"
          )

          rem ====== 1. 拷贝源码 ======
          cd /d "%LLVM_CODE_BASE%"
          if not exist llvm\CMakeLists.txt (
              echo [ERROR] 源码目录下找不到 llvm\CMakeLists.txt
              exit /b 1
          )

          rem ====== 2. 生成构建树 ======
          call "%VS_ROOT_DIR%\VC\Auxiliary\Build\vcvarsall.bat" amd64 || (echo vcvarsall failed && exit /b 1)
          cmake -S llvm ^
                -B "%LLVM_BUILD_DIR%" ^
                -G Ninja ^
                -DCMAKE_BUILD_TYPE=%LLVM_CONFIG% ^
                -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" ^
                -DLLVM_TARGETS_TO_BUILD="X86" ^
                -DLLVM_ENABLE_LLD=OFF ^
                -DPACKAGE_VENDOR="Build By @Riverbreaker" ^
                -DCLANG_VENDOR="Build By @Riverbreaker" ^
                -DCLANG_VERSION_EXTRA="(Github Actions CI Build)" ^
                -DCMAKE_INSTALL_PREFIX="%LLVM_INSTALL_DIR%"
          if errorlevel 1 (
              echo [ERROR] CMake 生成失败
              exit /b 1
          )

          rem ====== 3. 编译 ======
          ninja -C "%LLVM_BUILD_DIR%" -j8
          if errorlevel 1 (
              echo [ERROR] 编译失败
              exit /b 1
          )

          rem ====== 5. 安装 ======
          ninja -C "%LLVM_BUILD_DIR%" install
          echo [INFO] 安装完成，目录：%LLVM_INSTALL_DIR%

          rem ====== 6. 验证 ======
          echo [INFO] 验证安装结果
          "%LLVM_INSTALL_DIR%\bin\clang.exe" --version
          echo [INFO] 运行测试
          echo #include ^<stdio.h^> > test.c
          echo int main() { printf("Hello, World!\n"); return 0; } >> test.c
          "%LLVM_INSTALL_DIR%\bin\clang.exe" test.c -o test.exe && test.exe
          if errorlevel 1 exit /b 1

          rem ====== 7. 打包 ======
          cd /d "%LLVM_INSTALL_DIR%"
          set "ZIP_FILE=%PACKAGE_DIR%\llvm-${{ inputs.llvm-version }}-windows-%LLVM_CONFIG%.7z"
          if exist "%ZIP_FILE%" del /f /q "%ZIP_FILE%"
          echo [INFO] 开始打包到：%ZIP_FILE%
          7z a -tzip "%ZIP_FILE%" . -mx=6 -mmt=on
          echo [INFO] 打包完成：%ZIP_FILE%

          rem ====== 8. 清理 ======
          powershell -command "Remove-Item -Recurse -Force '%LLVM_BUILD_DIR%'" || (echo [ERROR] 清理失败 && exit /b 1)

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: llvm-${{ inputs.llvm-version }}-windows-${{ matrix.config }}
          path: C:/llvm/packages/llvm-${{ inputs.llvm-version }}-windows-${{ matrix.config }}.7z

  upload-2-gh-release:
    needs: build-llvm-windows
    runs-on: windows-latest
    permissions:
      contents: write
    strategy:
      matrix:
        config: [Debug, Release, RelWithDebInfo]

    steps:
      - uses: actions/checkout@v3

      - name: download artifact
        uses: actions/download-artifact@v4
        with:
          name: llvm-${{ inputs.llvm-version }}-windows-${{ matrix.config }}
          path: ${{ runner.temp }}/artifacts

      - name: make packages unless 2GB
        shell: pwsh
        env:
          CONFIG: ${{ matrix.config }}
          LLVM_VERSION: ${{ inputs.llvm-version }}
          RUNNER_TEMP: ${{ runner.temp }}
        run: |
          $FilePath = "$env:RUNNER_TEMP/artifacts/llvm-$env:LLVM_VERSION-windows-$env:CONFIG.zip"
          $NewFilePath = "$env:RUNNER_TEMP/packages"
          New-Item -Path $NewFilePath -ItemType Directory -Force | Out-Null

          $FileBaseName = "llvm-$env:LLVM_VERSION-windows-$env:CONFIG"
          $LimitSize = 1950MB
          $FileSize = (Get-Item $FilePath).Length

          if ($FileSize -gt $LimitSize) {
            Write-Host "[INFO] 文件超过限制大小，开始分卷压缩"
            $VolumeSize = "1900MB"
            $OutputPath = Join-Path $NewFilePath "$FileBaseName.7z"
            & 7z a $OutputPath $FilePath -v$VolumeSize -mx=6 -mmt-on
            Write-Host "[INFO] 分卷压缩完成，输出到: $OutputPath"
          } else {
            Write-Host "[INFO] 文件大小正常，直接复制到: $NewFilePath"
            Copy-Item $FilePath (Join-Path $NewFilePath ([System.IO.Path]::GetFileName($FilePath)))
            Write-Host "[INFO] 复制完成"
          }
      - name: Upload to artifact
        uses: actions/upload-artifact@v4
        with:
          name: llvm-${{ inputs.llvm-version }}-windows-${{ matrix.config }}
          path: ${{ runner.temp }}/packages/llvm-${{ inputs.llvm-version }}-windows-${{ matrix.config }}.*
